/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.12
 * Generated at: 2019-12-10 16:47:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Project_005f46;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("#tb1 {\r\n");
      out.write("   width : 700px;\r\n");
      out.write("}\r\n");
      out.write(".center {\r\n");
      out.write("   text-align : center;\r\n");
      out.write("}\r\n");
      out.write(".right{\r\n");
      out.write("   text-align : right;\r\n");
      out.write("}\r\n");
      out.write("#tb2 {\r\n");
      out.write("   width : 700px;\r\n");
      out.write("   height : 200px;\r\n");
      out.write("   text-align : center;\r\n");
      out.write("   border-collapse : collapse;\r\n");
      out.write("}\r\n");
      out.write("#days {\r\n");
      out.write("   height : 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Calendar</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 20170472 백진경 -->\r\n");
      out.write("   ");

   
   //돌아가는데 가독성 부분만 봐주세요
  
   
     out.println("<div align = \"left\">");
  
      //먼저 Calendar 객체를 두 개 만들었어요. cal은 달력용, cal2은 우측 상단 출력용
      Calendar cal = Calendar.getInstance();
      Calendar cal2 = Calendar.getInstance();
      
    //parameter를 통해 year, month값을 받았어요
      String sYear = request.getParameter("year");
      String sMonth = request.getParameter("month");
      int year, month;
      
    //그리고 그 값을 String에서 Integer로 바꿔주고, 만약 값이 없으면 오늘 달력으로
      if (sYear == null || sMonth == null) {
         year = cal.get(Calendar.YEAR);
         month = cal.get(Calendar.MONTH) + 1;
      } else {
         year = Integer.parseInt(sYear);
         month = Integer.parseInt(sMonth);
      }
      
    // 만약 월의 범위가 넘어가면 작동 안 되게 바꿨어요
      if(month >= 12) {
         month = 12;
      }
      if(month <= 1){
         month = 1;
      }

    //출력용에 값을 넣어줬어요
      int year_static = cal2.get(Calendar.YEAR);;
      int month_static = cal2.get(Calendar.MONTH) + 1;
      int date_static = cal2.get(Calendar.DAY_OF_MONTH);
   
    //달력용에도 값을 넣고, 요일이랑 마지막날짜랑 줄을 바꾸기 위한 변수를 선언했어요 
      cal.set(year, month - 1, 1);
      int day = cal.get(Calendar.DAY_OF_WEEK);
      int end = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
      int space = 0;
      
     // 테이블을 만들어 첫 줄을 작성했어요
      out.println("<table id = \"tb1\">" );
      out.println("<tr>" );
      out.println("<td>" + "<b>" +"<a href=\"calendar.jsp?year="+(year-1));
      out.println("&month=" + month + "\">" + "◀" + "</a>" );
      out.println(year + "년");
      out.println("<a href=\"calendar.jsp?year="+(year+1));  
      out.println("&month=" + month + "\">" + "▶ " +"</a>" + "</td>" );
      
      out.println("<td class = \"center\">" + "<b>" + "<a href=\"calendar.jsp?year="+year);
      out.println("&month=" + (month-1) + "\">" + "◀" + "</a>" );
      out.println(month + "월");
      out.println("<a href=\"calendar.jsp?year="+year);  
      out.println("&month=" + (month+1) + "\">" + "▶ " +"</a>" + "</td>" );
         
      out.println("<td class = \"right\">");
      out.println("<b>" + year_static + "-" + month_static + "-" + date_static + "</b>"+ " </td>");
      out.println("</tr>" + "</table>" );

     //달력의 요일부를 출력했어요
      out.println("<table id = \"tb2\" border = \"1\">");
      out.println("<tr>");
      out.println("<td id = \"days\">" + "<font color = \"red\">" + "일" + "</font>" + "</td>");
      out.println("<td id = \"days\">" + "월" + "</td>");
      out.println("<td id = \"days\">" + "화" + "</td>");
      out.println("<td id = \"days\">" + "수" + "</td>");
      out.println("<td id = \"days\">" + "목" + "</td>");
      out.println("<td id = \"days\">" + "금" + "</td>");
      out.println("<td id = \"days\">" + "토" + "</td>" + "</tr>" + "<tr>");
      
      //달력의 날짜를 출력했어요
      for (int i = 1; i <= end; i++) {
         while (space < day - 1) {
            out.println("<td>" + "&nbsp" + "</td>");
            space++;
         }
         
         if (space % 7 == 0) { //만약 일요일이면 붉게 출력하기
            out.println("<td>" + "<font color = \"red\">" + i + "</td>");
            space++;
         } else {
             out.println("<td>" + i + "</td>");
             space++;     
         }
         
         
         if (space % 7 == 0){ //만약 7개를 다 출력했으면 줄 바꾸기
            out.println("</tr>" + "<tr>");
         }
 
         if (i == end) { //마지막줄에서 마지막날이 지나도 7칸을 모두 출력하기
            while (space % 7 !=0 ) {
                 out.println("<td>" + "&nbsp" + "</td>");
                 space++;
              }
         }
         
      }
      out.println("</tr>");
      out.println("</table>");
      out.println("</div>");
      
 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
